//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: B4RunAction.cc 87359 2014-12-01 16:04:27Z gcosmo $
//
/// \file B4RunAction.cc
/// \brief Implementation of the B4RunAction class

#include "B4RunAction.hh"
#include "B4Analysis.hh"

#include "G4Run.hh"
#include "G4RunManager.hh"
#include "G4UnitsTable.hh"
#include "G4SystemOfUnits.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B4RunAction::B4RunAction()
 : G4UserRunAction()
{ 
  // set printing event number per each event
  G4RunManager::GetRunManager()->SetPrintProgress(1);     

  // Create analysis manager
  // The choice of analysis technology is done via selectin of a namespace
  // in B4Analysis.hh
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
  G4cout << "Using " << analysisManager->GetType() << G4endl;

  // Create directories 
  //analysisManager->SetHistoDirectoryName("histograms");
  //analysisManager->SetNtupleDirectoryName("ntuple");
  analysisManager->SetVerboseLevel(1);
  analysisManager->SetFirstHistoId(1);

  // Book histograms, ntuple
  //
  
  // Creating histograms
  //analysisManager->CreateH1("h20","Edep in Cu target", 100, 0., 10*GeV);
  analysisManager->CreateH1("h1","Edep in tungsten", 100, 0., 10*GeV);
  analysisManager->CreateH1("h2","Edep in Alumina1", 100, 0., 2*GeV);
  analysisManager->CreateH1("h3","trackL in tungsten", 100, 0., 300*cm);
  analysisManager->CreateH1("h4","trackL in Alumina1", 100, 0., 300*cm);
  analysisManager->CreateH1("h5","Hits in Tungsten 1", 50, 0., 100 );
  analysisManager->CreateH1("h6","Hits in ACE 1", 50, 0., 100 ); 
  analysisManager->CreateH1("h7","Radial hit profile, ACE 1", 24, 0., 6.0 );
  analysisManager->CreateH1("h8","Radial hit profile, ACE 2", 24, 0., 6.0 );
  analysisManager->CreateH1("h9","Radial hit profile, ACE 3", 24, 0., 6.0 );
  analysisManager->CreateH1("h10","temporal hit profile, ACE 1", 2500, 0, 5000);//1000, 2401, 3400 );
  analysisManager->CreateH1("h11","temporal hit profile, ACE 2", 2500, 0, 5000);//1000,2401, 3400);
  analysisManager->CreateH1("h12","temporal hit profile, ACE 3", 2500, 0, 5000);//1000, 2401, 3400  );  
  analysisManager->CreateH2("s1","hits in tungsten 1", 60, -6.0, 6.0,60, -6.0, 6.0 ); 
  analysisManager->CreateH2("s2","excess e- charge in ACE1", 60, -6.0, 6.0,60, -6.0, 6.0 ); 
  analysisManager->CreateH2("s3","excess e- charge in ACE2", 60, -6.0, 6.0,60, -6.0, 6.0 ); 
  analysisManager->CreateH2("s4","excess e- charge in ACE3", 60, -6.0, 6.0,60, -6.0, 6.0 );  
  analysisManager->CreateH2("s5","total charge in ACE1", 60, -6.0, 6.0,60, -6.0, 6.0 ); 
  analysisManager->CreateH2("s6","total charge in ACE2", 60, -6.0, 6.0,60, -6.0, 6.0 ); 
  analysisManager->CreateH2("s7","total charge in ACE3", 60, -6.0, 6.0,60, -6.0, 6.0 );     
  
  

  
  // Creating ntuple
  //
//   analysisManager->CreateNtuple("B4", "Edep, TrackL, Hits");
//   analysisManager->CreateNtupleDColumn("Eabs");
//   analysisManager->CreateNtupleDColumn("Egap");
//   analysisManager->CreateNtupleDColumn("Labs");
//   analysisManager->CreateNtupleDColumn("Lgap");
//   analysisManager->CreateNtupleDColumn("Nabs");  
//   analysisManager->CreateNtupleDColumn("Ngap"); 
//   analysisManager->CreateNtupleDColumn("Absx"); 
//   analysisManager->CreateNtupleDColumn("Absy"); 
//   analysisManager->CreateNtupleDColumn("Gapx"); 
//   analysisManager->CreateNtupleDColumn("Gapy");  
 // analysisManager->FinishNtuple();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B4RunAction::~B4RunAction()
{
  delete G4AnalysisManager::Instance();  
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void B4RunAction::BeginOfRunAction(const G4Run* /*run*/)
{ 
  //inform the runManager to save random number seed
  //G4RunManager::GetRunManager()->SetRandomNumberStore(true);
  
  // Get analysis manager
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();

  // Open an output file

  // filename instructions for data
  auto energies{{"0001", "0050", "1", "10", "50", "1000"}};
                 // 0.001, 0.050, 1, 10, 50, 1000 GeV
 
  for (auto const& i : energies) {
    auto fileName{"ACE4Sim_Data_original_" + i};     // rename file
    auto filePath{"~/geant4/Projects/ACE3/data/original/" + fileName + ".root"};
      
    // loop: check if new file exists
    if ( !( access(filePath.c_str(), F_OK) != -1 ) ) break;
  }
    
  analysisManager->OpenFile(fileName);
  
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void B4RunAction::EndOfRunAction(const G4Run* /*run*/)
{
  // print histogram statistics
  //
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
  if ( analysisManager->GetH1(1) ) {
    G4cout << G4endl << " ----> print histograms statistic ";
    if(isMaster) {
      G4cout << "for the entire run " << G4endl << G4endl; 
    }
    else {
      G4cout << "for the local thread " << G4endl << G4endl; 
    }
    
//     G4cout << " E Cu Target : mean = " 
//        << G4BestUnit(analysisManager->GetH1(15)->mean(), "Energy") 
//        << " rms = " 
//        << G4BestUnit(analysisManager->GetH1(15)->rms(),  "Energy") << G4endl;
    G4cout << " Etungsten : mean = " 
       << G4BestUnit(analysisManager->GetH1(1)->mean(), "Energy") 
       << " rms = " 
       << G4BestUnit(analysisManager->GetH1(1)->rms(),  "Energy") << G4endl;
    
    G4cout << " EAlumina1 : mean = " 
       << G4BestUnit(analysisManager->GetH1(2)->mean(), "Energy") 
       << " rms = " 
       << G4BestUnit(analysisManager->GetH1(2)->rms(),  "Energy") << G4endl;
    
    G4cout << " LTungsten : mean = " 
      << G4BestUnit(analysisManager->GetH1(3)->mean(), "Length") 
      << " rms = " 
      << G4BestUnit(analysisManager->GetH1(3)->rms(),  "Length") << G4endl;

    G4cout << " LAlumina1 : mean = " 
      << G4BestUnit(analysisManager->GetH1(4)->mean(), "Length") 
      << " rms = " 
      << G4BestUnit(analysisManager->GetH1(4)->rms(),  "Length") << G4endl;
      
    G4cout << " tungsten output hits : mean = " 
      << analysisManager->GetH1(5)->mean() 
      << " rms = " 
      << analysisManager->GetH1(5)->rms() << G4endl;  
     G4cout << " Alumina1 output hits : mean = " 
      << analysisManager->GetH1(6)->mean() 
      << " rms = " 
      << analysisManager->GetH1(6)->rms() << G4endl;       
  }

  // save histograms & ntuple
  //
  analysisManager->Write();
  analysisManager->CloseFile();

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
